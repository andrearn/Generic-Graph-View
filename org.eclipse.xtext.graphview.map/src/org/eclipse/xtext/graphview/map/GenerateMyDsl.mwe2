/*******************************************************************************
 * Copyright (c) 2011 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
module org.eclipse.xtext.graphview.map.GenerateGraphViewMapping

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*
import org.eclipse.emf.mwe.utils.*

var rootPath = ".."
var file.extensions = "gvmap"
var projectName = "org.eclipse.xtext.graphview.map"

Workflow {

	bean = StandaloneSetup {
		scanClassPath = true
		platformUri = rootPath
		registerGenModelFile = "platform:/resource/org.eclipse.xtext.graphview.map/model/GraphViewMapping.genmodel"
		registerGenModelFile = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel"
		registerGenModelFile = "platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.genmodel"
		registerGeneratedEPackage = "org.eclipse.xtext.graphview.map.graphViewMapping.GraphViewMappingPackage"
	}

	component = org.eclipse.emf.mwe2.ecore.EcoreGenerator {
		genModel = "platform:/resource/org.eclipse.xtext.graphview.map/model/GraphViewMapping.genmodel"
		srcPath = "emf-gen/"
	}

	component = XtextGenerator {
		configuration = {
			project = StandardProjectConfig {
				baseName = "${projectName}"
				rootPath = rootPath
//				runtime = {
//					enabled = true
//					ecoreModel = "model/GraphViewMapping.ecore"
//				}
				runtimeTest = {
					enabled = true
				}
				eclipsePlugin = {
					enabled = true
				}
				eclipsePluginTest = {
					enabled = true
				}
				genericIde = {
					enabled = false
				}
				createEclipseMetaData = true
			}
			code = {
				encoding = "UTF-8"
				lineDelimiter = "\n"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
			}
		}
		language = XtextGeneratorLanguage {
			name = "org.eclipse.xtext.graphview.map.GraphViewMapping"
			fileExtensions = file.extensions
			referencedResource = "platform:/resource/org.eclipse.xtext.graphview.map/model/GraphViewMapping.genmodel"
			fragment = grammarAccess.GrammarAccessFragment2 {}
			fragment = ecore.EMFGeneratorFragment2 {}
			fragment = serializer.SerializerFragment2 {
				generateStub = false
				generateXtendStub = false
			}
			fragment = resourceFactory.ResourceFactoryFragment2 {}
			fragment = parser.antlr.XtextAntlrGeneratorFragment2 {}
			fragment = validation.ValidatorFragment2 {
				generateStub = false
				generateXtendStub = false
				composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
				composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}
			fragment = scoping.ImportNamespacesScopingFragment2 {}
			fragment = exporting.QualifiedNamesFragment2 {}
			fragment = builder.BuilderIntegrationFragment2 {}
			//    fragment = generator.GeneratorFragment2 {}
			fragment = formatting.Formatter2Fragment2 {
				generateStub = false
				generateXtendStub = false
			}
			fragment = ui.labeling.LabelProviderFragment2 {}
			fragment = ui.outline.QuickOutlineFragment2 {}
			fragment = ui.outline.OutlineTreeProviderFragment2 {}
			fragment = ui.quickfix.QuickfixProviderFragment2 {}
			fragment = ui.contentAssist.ContentAssistFragment2 {}
			fragment = junit.Junit4Fragment2 {}
			fragment = ui.refactoring.RefactorElementNameFragment2 {}
			fragment = types.TypesGeneratorFragment2 {}
			//    fragment = xbase.XtypeGeneratorFragment2 {}
			fragment = xbase.XbaseGeneratorFragment2 {
				useInferredJvmModel = false
				generateXtendInferrer = false
			}
			fragment = ui.templates.CodetemplatesGeneratorFragment2 {}
			fragment = ui.compare.CompareFragment2 {}

		}
	}
}
